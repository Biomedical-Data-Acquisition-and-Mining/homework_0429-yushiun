{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 9.96346605  4.59676542]\n",
      " [11.0329545  -0.16816717]\n",
      " [11.54155807  5.21116083]\n",
      " [ 8.69289001  1.54322016]\n",
      " [ 8.1062269   4.28695977]\n",
      " [ 8.30988863  4.80623966]\n",
      " [11.93027136  4.64866327]\n",
      " [ 9.67284681 -0.20283165]\n",
      " [ 8.34810316  5.13415623]\n",
      " [ 8.67494727  4.47573059]\n",
      " [ 9.17748385  5.09283177]\n",
      " [10.24028948  2.45544401]\n",
      " [ 8.68937095  1.48709629]\n",
      " [ 8.92229526 -0.63993225]\n",
      " [ 9.49123469  4.33224792]\n",
      " [ 9.25694192  5.13284858]\n",
      " [ 7.99815287  4.8525051 ]\n",
      " [ 8.18378052  1.29564214]\n",
      " [ 8.7337095   2.49162431]\n",
      " [ 9.32298256  5.09840649]\n",
      " [10.06393839  0.99078055]\n",
      " [ 9.50048972 -0.26430318]\n",
      " [ 8.34468785  1.63824349]\n",
      " [ 9.50169345  1.93824624]\n",
      " [ 9.15072323  5.49832246]\n",
      " [11.563957    1.3389402 ]]\n",
      "[1 0 1 0 0 1 1 0 1 1 1 1 0 0 1 1 1 0 0 1 0 0 0 0 1 0]\n",
      "X.shape: (26, 2)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/sklearn/utils/deprecation.py:86: FutureWarning: Function make_blobs is deprecated; Please import make_blobs directly from scikit-learn\n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import mglearn\n",
    "import matplotlib.pyplot as plt\n",
    "X, y = mglearn.datasets.make_forge()\n",
    "print(X)\n",
    "print(y)\n",
    "mglearn.discrete_scatter(X[:, 0], X[:, 1], y)\n",
    "plt.legend([\"Class 0\", \"Class 1\"], loc=4)\n",
    "plt.xlabel(\"First feature\")\n",
    "plt.ylabel(\"Second feature\")\n",
    "print(\"X.shape:\", X.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting kaggle\n",
      "  Downloading kaggle-1.5.12.tar.gz (58 kB)\n",
      "\u001b[K     |████████████████████████████████| 58 kB 1.2 MB/s eta 0:00:01\n",
      "\u001b[?25hRequirement already satisfied: six>=1.10 in /opt/anaconda3/lib/python3.8/site-packages (from kaggle) (1.15.0)\n",
      "Requirement already satisfied: certifi in /opt/anaconda3/lib/python3.8/site-packages (from kaggle) (2020.6.20)\n",
      "Requirement already satisfied: python-dateutil in /opt/anaconda3/lib/python3.8/site-packages (from kaggle) (2.8.1)\n",
      "Requirement already satisfied: requests in /opt/anaconda3/lib/python3.8/site-packages (from kaggle) (2.24.0)\n",
      "Requirement already satisfied: tqdm in /opt/anaconda3/lib/python3.8/site-packages (from kaggle) (4.50.2)\n",
      "Collecting python-slugify\n",
      "  Downloading python_slugify-5.0.2-py2.py3-none-any.whl (6.7 kB)\n",
      "Requirement already satisfied: urllib3 in /opt/anaconda3/lib/python3.8/site-packages (from kaggle) (1.25.11)\n",
      "Requirement already satisfied: chardet<4,>=3.0.2 in /opt/anaconda3/lib/python3.8/site-packages (from requests->kaggle) (3.0.4)\n",
      "Requirement already satisfied: idna<3,>=2.5 in /opt/anaconda3/lib/python3.8/site-packages (from requests->kaggle) (2.10)\n",
      "Collecting text-unidecode>=1.3\n",
      "  Downloading text_unidecode-1.3-py2.py3-none-any.whl (78 kB)\n",
      "\u001b[K     |████████████████████████████████| 78 kB 1.3 MB/s eta 0:00:01\n",
      "\u001b[?25hBuilding wheels for collected packages: kaggle\n",
      "  Building wheel for kaggle (setup.py) ... \u001b[?25ldone\n",
      "\u001b[?25h  Created wheel for kaggle: filename=kaggle-1.5.12-py3-none-any.whl size=73053 sha256=cc8564312725083ed31769424070f2cc3f68cb4607d56e626e5459c8440b20fc\n",
      "  Stored in directory: /Users/chenyuxun/Library/Caches/pip/wheels/29/da/11/144cc25aebdaeb4931b231e25fd34b394e6a5725cbb2f50106\n",
      "Successfully built kaggle\n",
      "Installing collected packages: text-unidecode, python-slugify, kaggle\n",
      "Successfully installed kaggle-1.5.12 python-slugify-5.0.2 text-unidecode-1.3\n"
     ]
    }
   ],
   "source": [
    "!pip install kaggle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mkdir: /Users/chenyuxun/.kaggel: File exists\r\n"
     ]
    }
   ],
   "source": [
    "!mkdir ~/.kaggel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "!cp /Users/chenyuxun/Downloads/kaggle.json /Users/chenyuxun/.kaggle/kaggle.json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "kaggle.json\r\n"
     ]
    }
   ],
   "source": [
    "!cd /Users/chenyuxun/.kaggle/ && ls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Your Kaggle API key is readable by other users on this system! To fix this, you can run 'chmod 600 /Users/chenyuxun/.kaggle/kaggle.json'\n",
      "ref                                                         title                                                size  lastUpdated          downloadCount  voteCount  usabilityRating  \n",
      "----------------------------------------------------------  --------------------------------------------------  -----  -------------------  -------------  ---------  ---------------  \n",
      "mansoordaku/ckdisease                                       Chronic KIdney Disease dataset                       10KB  2017-04-13 09:16:08          10491        124  0.7058824        \n",
      "colearninglounge/chronic-kidney-disease                     Chronic Kidney Disease                               10KB  2020-08-26 03:33:35            928         26  0.8235294        \n",
      "abhia1999/chronic-kidney-disease                            chronic kidney disease                                6KB  2020-02-21 09:40:58            791         16  0.88235295       \n",
      "rishidamarla/chronic-kidney-disease                         Chronic Kidney Disease                              968KB  2020-09-12 19:45:05            191         15  0.88235295       \n",
      "akshayksingh/kidney-disease-dataset                         Kidney Disease Dataset                               10KB  2019-08-04 17:07:05           1599         16  0.5882353        \n",
      "mahmoudlimam/preprocessed-chronic-kidney-disease-dataset    Pre-processed Chronic Kidney Disease Dataset.        12KB  2021-03-13 14:24:23             33          4  0.47058824       \n",
      "maheshdadhich/us-healthcare-data                            U.S. Healthcare Data                                 36MB  2017-12-22 16:30:29           5595        130  0.7647059        \n",
      "mpwolke/cusersmarildownloads22365jpeg                       U.S. Adults Susceptible to Severe Covid-19          244KB  2020-11-07 03:12:01             20          4  1.0              \n",
      "arashnic/flu-data                                            H1N1 and Seasonal Flu Vaccines                     636KB  2020-11-27 18:33:36            300         10  0.9705882        \n",
      "johnjdavisiv/urinary-biomarkers-for-pancreatic-cancer       Urinary biomarkers for pancreatic cancer             18KB  2020-12-10 22:41:21            306          8  1.0              \n",
      "usharengaraju/ecological-footprint                          Fibrosis SMOC2 Raw Counts                           481KB  2020-04-05 00:41:52            163        160  1.0              \n",
      "borschman/early-stage-of-indians-chronic-kidney-diseaseckd  Early stage of Indians Chronic Kidney Disease(CKD)    9KB  2018-06-13 06:56:33            202          2  0.1875           \n",
      "ur10ec065/kidneychronic                                     KidneyChronic                                         8KB  2020-02-05 00:30:04             62          0  0.5882353        \n",
      "imrankhan77/abid-chronic-kidney                             ABID Chronic Kidney                                 262MB  2021-03-02 13:19:23              3          0  0.125            \n",
      "yasserhessein/chronic-kidney-disease                        Chronic_Kidney_Disease                               10KB  2020-12-01 14:03:15             21          1  0.125            \n",
      "ephysio/chronic-kidney-disease                              chronic_kidney_disease                                8KB  2021-01-22 09:04:34              5          0  0.1764706        \n",
      "decide-soluciones/air-quality-madrid                        Air Quality in Madrid (2001-2018)                   158MB  2018-06-18 13:18:22           8383        182  0.7941176        \n",
      "nishantrock/predict-physician-and-drug-axtria-hackathon     Predict Physician and Drug [ Axtria Hackathon ]       2MB  2021-03-15 05:52:34             10          0  0.3529412        \n",
      "philanipro/pima-indians-diabetes                            Pima Indians Diabetes                                 9KB  2020-05-23 14:14:58             45          0  0.7058824        \n"
     ]
    }
   ],
   "source": [
    "!kaggle datasets list -s 'Chronic KIdney Disease dataset'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Your Kaggle API key is readable by other users on this system! To fix this, you can run 'chmod 600 /Users/chenyuxun/.kaggle/kaggle.json'\n",
      "Downloading ckdisease.zip to /Users/chenyuxun\n",
      "  0%|                                               | 0.00/9.51k [00:00<?, ?B/s]\n",
      "100%|██████████████████████████████████████| 9.51k/9.51k [00:00<00:00, 3.79MB/s]\n"
     ]
    }
   ],
   "source": [
    "!kaggle datasets download -d 'mansoordaku/ckdisease'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Archive:  ckdisease.zip\r\n",
      "  inflating: data/kidney_disease.csv  \r\n"
     ]
    }
   ],
   "source": [
    "!unzip ckdisease.zip -d data/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "!mv data/kidney_disease.csv data/ckdisease.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pyspark\n",
      "  Downloading pyspark-3.1.1.tar.gz (212.3 MB)\n",
      "\u001b[K     |████████████████████████████████| 212.3 MB 1.4 MB/s eta 0:00:01\n",
      "\u001b[?25hCollecting py4j==0.10.9\n",
      "  Downloading py4j-0.10.9-py2.py3-none-any.whl (198 kB)\n",
      "\u001b[K     |████████████████████████████████| 198 kB 1.8 MB/s eta 0:00:01\n",
      "\u001b[?25hBuilding wheels for collected packages: pyspark\n",
      "  Building wheel for pyspark (setup.py) ... \u001b[?25ldone\n",
      "\u001b[?25h  Created wheel for pyspark: filename=pyspark-3.1.1-py2.py3-none-any.whl size=212767607 sha256=7f0fba1ab370bbcb5f420f963162cb85e3e7b3ca4fc8fff58da035016b9036b0\n",
      "  Stored in directory: /Users/chenyuxun/Library/Caches/pip/wheels/b3/0e/81/264aeed961e43b9f6ba9ec81c8c540d2d7dccc52c6b51cbf22\n",
      "Successfully built pyspark\n",
      "Installing collected packages: py4j, pyspark\n",
      "Successfully installed py4j-0.10.9 pyspark-3.1.1\n"
     ]
    }
   ],
   "source": [
    "!pip install pyspark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.sql import SparkSession\n",
    "spark = SparkSession.builder.getOrCreate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = spark.read.csv('data/ckdisease.csv', header=True, inferSchema=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---+----+----+-----+---+---+------+--------+----------+----------+-----+----+---+-----+----+----+---+----+----+---+---+---+-----+---+---+--------------+\n",
      "| id| age|  bp|   sg| al| su|   rbc|      pc|       pcc|        ba|  bgr|  bu| sc|  sod| pot|hemo|pcv|  wc|  rc|htn| dm|cad|appet| pe|ane|classification|\n",
      "+---+----+----+-----+---+---+------+--------+----------+----------+-----+----+---+-----+----+----+---+----+----+---+---+---+-----+---+---+--------------+\n",
      "|  0|48.0|80.0| 1.02|1.0|0.0|  null|  normal|notpresent|notpresent|121.0|36.0|1.2| null|null|15.4| 44|7800| 5.2|yes|yes| no| good| no| no|           ckd|\n",
      "|  1| 7.0|50.0| 1.02|4.0|0.0|  null|  normal|notpresent|notpresent| null|18.0|0.8| null|null|11.3| 38|6000|null| no| no| no| good| no| no|           ckd|\n",
      "|  2|62.0|80.0| 1.01|2.0|3.0|normal|  normal|notpresent|notpresent|423.0|53.0|1.8| null|null| 9.6| 31|7500|null| no|yes| no| poor| no|yes|           ckd|\n",
      "|  3|48.0|70.0|1.005|4.0|0.0|normal|abnormal|   present|notpresent|117.0|56.0|3.8|111.0| 2.5|11.2| 32|6700| 3.9|yes| no| no| poor|yes|yes|           ckd|\n",
      "|  4|51.0|80.0| 1.01|2.0|0.0|normal|  normal|notpresent|notpresent|106.0|26.0|1.4| null|null|11.6| 35|7300| 4.6| no| no| no| good| no| no|           ckd|\n",
      "+---+----+----+-----+---+---+------+--------+----------+----------+-----+----+---+-----+----+----+---+----+----+---+---+---+-----+---+---+--------------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df.show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-0.44822073  0.33122576  0.77932073  0.03497884 -1.38773632 -2.47196233\n",
      " -1.52730805  1.49417157  1.00032374  0.22956153 -1.05979555  0.7789638\n",
      "  0.75418806 -1.51369739 -1.67303415 -0.90496988  0.08448544 -0.52734666\n",
      " -0.54114599 -0.3409073   0.21778193 -1.12469096  0.37299129  0.09756349\n",
      " -0.98618122  0.96695428 -1.13455014  0.69798591  0.43655826 -0.95652133\n",
      "  0.03527881 -2.08581717 -0.47411033  1.53708251  0.86893293  1.87664889\n",
      "  0.0945257  -1.41502356  0.25438895  0.09398858]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Target')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X, y = mglearn.datasets.make_wave(n_samples=40)\n",
    "print(y)\n",
    "plt.plot(X, y, 'o')\n",
    "plt.ylim(-3, 3)\n",
    "plt.xlabel(\"Feature\")\n",
    "plt.ylabel(\"Target\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " \t The data frame has 400 rows and 26 columns. \n",
      "\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 400 entries, 0 to 399\n",
      "Data columns (total 26 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   id              400 non-null    int64  \n",
      " 1   age             391 non-null    float64\n",
      " 2   bp              388 non-null    float64\n",
      " 3   sg              353 non-null    float64\n",
      " 4   al              354 non-null    float64\n",
      " 5   su              351 non-null    float64\n",
      " 6   rbc             248 non-null    object \n",
      " 7   pc              335 non-null    object \n",
      " 8   pcc             396 non-null    object \n",
      " 9   ba              396 non-null    object \n",
      " 10  bgr             356 non-null    float64\n",
      " 11  bu              381 non-null    float64\n",
      " 12  sc              383 non-null    float64\n",
      " 13  sod             313 non-null    float64\n",
      " 14  pot             312 non-null    float64\n",
      " 15  hemo            348 non-null    float64\n",
      " 16  pcv             330 non-null    object \n",
      " 17  wc              295 non-null    object \n",
      " 18  rc              270 non-null    object \n",
      " 19  htn             398 non-null    object \n",
      " 20  dm              398 non-null    object \n",
      " 21  cad             398 non-null    object \n",
      " 22  appet           399 non-null    object \n",
      " 23  pe              399 non-null    object \n",
      " 24  ane             399 non-null    object \n",
      " 25  classification  400 non-null    object \n",
      "dtypes: float64(11), int64(1), object(14)\n",
      "memory usage: 81.4+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>age</th>\n",
       "      <th>bp</th>\n",
       "      <th>sg</th>\n",
       "      <th>al</th>\n",
       "      <th>su</th>\n",
       "      <th>rbc</th>\n",
       "      <th>pc</th>\n",
       "      <th>pcc</th>\n",
       "      <th>ba</th>\n",
       "      <th>...</th>\n",
       "      <th>pcv</th>\n",
       "      <th>wc</th>\n",
       "      <th>rc</th>\n",
       "      <th>htn</th>\n",
       "      <th>dm</th>\n",
       "      <th>cad</th>\n",
       "      <th>appet</th>\n",
       "      <th>pe</th>\n",
       "      <th>ane</th>\n",
       "      <th>classification</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>1.020</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>normal</td>\n",
       "      <td>notpresent</td>\n",
       "      <td>notpresent</td>\n",
       "      <td>...</td>\n",
       "      <td>44</td>\n",
       "      <td>7800</td>\n",
       "      <td>5.2</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>good</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>ckd</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>1.020</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>normal</td>\n",
       "      <td>notpresent</td>\n",
       "      <td>notpresent</td>\n",
       "      <td>...</td>\n",
       "      <td>38</td>\n",
       "      <td>6000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>good</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>ckd</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>62.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>1.010</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>normal</td>\n",
       "      <td>normal</td>\n",
       "      <td>notpresent</td>\n",
       "      <td>notpresent</td>\n",
       "      <td>...</td>\n",
       "      <td>31</td>\n",
       "      <td>7500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>poor</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>ckd</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>48.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>1.005</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>normal</td>\n",
       "      <td>abnormal</td>\n",
       "      <td>present</td>\n",
       "      <td>notpresent</td>\n",
       "      <td>...</td>\n",
       "      <td>32</td>\n",
       "      <td>6700</td>\n",
       "      <td>3.9</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>poor</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>ckd</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>51.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>1.010</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>normal</td>\n",
       "      <td>normal</td>\n",
       "      <td>notpresent</td>\n",
       "      <td>notpresent</td>\n",
       "      <td>...</td>\n",
       "      <td>35</td>\n",
       "      <td>7300</td>\n",
       "      <td>4.6</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>good</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>ckd</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   id   age    bp     sg   al   su     rbc        pc         pcc          ba  \\\n",
       "0   0  48.0  80.0  1.020  1.0  0.0     NaN    normal  notpresent  notpresent   \n",
       "1   1   7.0  50.0  1.020  4.0  0.0     NaN    normal  notpresent  notpresent   \n",
       "2   2  62.0  80.0  1.010  2.0  3.0  normal    normal  notpresent  notpresent   \n",
       "3   3  48.0  70.0  1.005  4.0  0.0  normal  abnormal     present  notpresent   \n",
       "4   4  51.0  80.0  1.010  2.0  0.0  normal    normal  notpresent  notpresent   \n",
       "\n",
       "   ...  pcv    wc   rc  htn   dm  cad appet   pe  ane classification  \n",
       "0  ...   44  7800  5.2  yes  yes   no  good   no   no            ckd  \n",
       "1  ...   38  6000  NaN   no   no   no  good   no   no            ckd  \n",
       "2  ...   31  7500  NaN   no  yes   no  poor   no  yes            ckd  \n",
       "3  ...   32  6700  3.9  yes   no   no  poor  yes  yes            ckd  \n",
       "4  ...   35  7300  4.6   no   no   no  good   no   no            ckd  \n",
       "\n",
       "[5 rows x 26 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('/Users/chenyuxun/Downloads/kidney_disease.csv');\n",
    "\n",
    "print(\"\\n \\t The data frame has {0[0]} rows and {0[1]} columns. \\n\".format(data.shape))\n",
    "data.info()\n",
    "\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 400 entries, 0 to 399\n",
      "Data columns (total 24 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   age     391 non-null    float64\n",
      " 1   bp      388 non-null    float64\n",
      " 2   sg      353 non-null    float64\n",
      " 3   al      354 non-null    float64\n",
      " 4   su      351 non-null    float64\n",
      " 5   rbc     248 non-null    object \n",
      " 6   pc      335 non-null    object \n",
      " 7   pcc     396 non-null    object \n",
      " 8   ba      396 non-null    object \n",
      " 9   bgr     356 non-null    float64\n",
      " 10  bu      381 non-null    float64\n",
      " 11  sc      383 non-null    float64\n",
      " 12  sod     313 non-null    float64\n",
      " 13  pot     312 non-null    float64\n",
      " 14  hemo    348 non-null    float64\n",
      " 15  pcv     330 non-null    object \n",
      " 16  wc      295 non-null    object \n",
      " 17  rc      270 non-null    object \n",
      " 18  htn     398 non-null    object \n",
      " 19  dm      398 non-null    object \n",
      " 20  cad     398 non-null    object \n",
      " 21  appet   399 non-null    object \n",
      " 22  pe      399 non-null    object \n",
      " 23  ane     399 non-null    object \n",
      "dtypes: float64(11), object(13)\n",
      "memory usage: 75.1+ KB\n"
     ]
    }
   ],
   "source": [
    "data.drop(data.columns[[-1, 0]], axis=1, inplace=True)\n",
    "\n",
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bp</th>\n",
       "      <th>sg</th>\n",
       "      <th>al</th>\n",
       "      <th>su</th>\n",
       "      <th>rbc</th>\n",
       "      <th>pc</th>\n",
       "      <th>pcc</th>\n",
       "      <th>ba</th>\n",
       "      <th>bgr</th>\n",
       "      <th>...</th>\n",
       "      <th>hemo</th>\n",
       "      <th>pcv</th>\n",
       "      <th>wc</th>\n",
       "      <th>rc</th>\n",
       "      <th>htn</th>\n",
       "      <th>dm</th>\n",
       "      <th>cad</th>\n",
       "      <th>appet</th>\n",
       "      <th>pe</th>\n",
       "      <th>ane</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>48.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>1.020</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>normal</td>\n",
       "      <td>notpresent</td>\n",
       "      <td>notpresent</td>\n",
       "      <td>121.0</td>\n",
       "      <td>...</td>\n",
       "      <td>15.4</td>\n",
       "      <td>44</td>\n",
       "      <td>7800</td>\n",
       "      <td>5.2</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>good</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>1.020</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>normal</td>\n",
       "      <td>notpresent</td>\n",
       "      <td>notpresent</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>11.3</td>\n",
       "      <td>38</td>\n",
       "      <td>6000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>good</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>62.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>1.010</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>normal</td>\n",
       "      <td>normal</td>\n",
       "      <td>notpresent</td>\n",
       "      <td>notpresent</td>\n",
       "      <td>423.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.6</td>\n",
       "      <td>31</td>\n",
       "      <td>7500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>poor</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>48.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>1.005</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>normal</td>\n",
       "      <td>abnormal</td>\n",
       "      <td>present</td>\n",
       "      <td>notpresent</td>\n",
       "      <td>117.0</td>\n",
       "      <td>...</td>\n",
       "      <td>11.2</td>\n",
       "      <td>32</td>\n",
       "      <td>6700</td>\n",
       "      <td>3.9</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>poor</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>51.0</td>\n",
       "      <td>80.0</td>\n",
       "      <td>1.010</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>normal</td>\n",
       "      <td>normal</td>\n",
       "      <td>notpresent</td>\n",
       "      <td>notpresent</td>\n",
       "      <td>106.0</td>\n",
       "      <td>...</td>\n",
       "      <td>11.6</td>\n",
       "      <td>35</td>\n",
       "      <td>7300</td>\n",
       "      <td>4.6</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>good</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    age    bp     sg   al   su     rbc        pc         pcc          ba  \\\n",
       "0  48.0  80.0  1.020  1.0  0.0     NaN    normal  notpresent  notpresent   \n",
       "1   7.0  50.0  1.020  4.0  0.0     NaN    normal  notpresent  notpresent   \n",
       "2  62.0  80.0  1.010  2.0  3.0  normal    normal  notpresent  notpresent   \n",
       "3  48.0  70.0  1.005  4.0  0.0  normal  abnormal     present  notpresent   \n",
       "4  51.0  80.0  1.010  2.0  0.0  normal    normal  notpresent  notpresent   \n",
       "\n",
       "     bgr  ...  hemo  pcv    wc   rc  htn   dm cad appet   pe  ane  \n",
       "0  121.0  ...  15.4   44  7800  5.2  yes  yes  no  good   no   no  \n",
       "1    NaN  ...  11.3   38  6000  NaN   no   no  no  good   no   no  \n",
       "2  423.0  ...   9.6   31  7500  NaN   no  yes  no  poor   no  yes  \n",
       "3  117.0  ...  11.2   32  6700  3.9  yes   no  no  poor  yes  yes  \n",
       "4  106.0  ...  11.6   35  7300  4.6   no   no  no  good   no   no  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " \t The data has 400 appet, 317 malignant and 82 benign.\n"
     ]
    }
   ],
   "source": [
    "appet_all = list(data.shape)[0]\n",
    "appet_categories = list(data['appet'].value_counts())\n",
    "\n",
    "print(\"\\n \\t The data has {} appet, {} malignant and {} benign.\".format(age_all, \n",
    "                                                                                appet_categories[0], \n",
    "                                                                                appet_categories[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "pcc_all = list(data.shape)[0]\n",
    "pcc_categories = list(data['appet'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "features_mean= list(data.columns[1:11])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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Lm6++WYefPBBitxuBg4cSJMmTfjss88AGDp0KG+//Tb79+9n8osvFi8TFMSkSZMAyM3NZcWKFdxx++0+ew/eEOxyMea6K7jz8Qm43W7OP+csmjdqyKw58wD408A+fLvoJz6fv5Bgl4uw0FAevfsGjDF0aNWcfj27cPVfH8PlctG6aSMu7O/ZDzYnCna5+OtVF3DLs6/jdluGn92FFkmJvPftYgAuPadHlcum7zvAPS9MB4oHUg/ucRpnndraK3WL75hK9+ke2ciYpdbabsaYlUAPa22eMWaltbbTsZb15i4nJ7vnvpW+LsExHvhitK9LcIR2a2cfu5EQcyDF1yU4RtgBpbGeqn3WxV4dpZu2eqHX/tbGdzjDL0cge5rQpBhjooH/AnONMZnAzpoqSkREROR4eNShsdZeVHL3n8aYb4G6FI+jERERER/ToOD/4UzB1tp5NVGIiIiIyP8qoC59ICIiclLSifUC69IHIiIicnJSQiMiIuJwVvmE1oCIiIg4nxIaERERh7MaQ6OERkRERJxPCY2IiIjD6Tw0SmhEREQkACihERERcTiLxtAooRERERHHU0IjIiLicBpDo4RGREREAoA6NCIiIuJ42uUkIiLicDqxnhIaERERCQBKaERERBxOh20roREREZEAoIRGRETE4XTYthIaERERCQBKaERERBxOY2iU0IiIiEgAUEIjIiLicBpDo4RGREREAoASGhEREYfTGBolNCIiIhIAlNCIiIg4nMbQKKERERGRAKCERkRExOE0hkYJjYiIiASAGk9oIoMP1vRLBISWXdr6ugTHaDdhtq9LcITf2g7xdQmO0POhPr4uwTF+vWycr0twjK5efj1rlNAooRERERHHU4dGREREHE+DgkVERBzOWu1yUkIjIiIijqeERkRExOGs8gmtAREREXE+JTQiIiIOpxPrKaERERGRAKCERkRExOGU0CihERERkQCghEZERMThlNAooREREZEAoIRGRETE4ZTQKKERERGRAKCERkRExOF0LSclNCIiIhIAlNCIiIg4nMbQKKERERGRAKAOjYiIiDiedjmJiIg4nHY5KaERERGRamSMGWSMWWeM2WiMub+S+VcaY34uuf1ojDmtOl5XCY2IiIjD+UtCY4xxAZOBAUAKsNQY87G19tcyzbYAfay1mcaYwcA0oMeJvrYSGhEREaku3YGN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\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,10))\n",
    "sns.heatmap(data[features_mean].corr(), annot=True, square=True, cmap='coolwarm')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 36 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "color_dic = {'good':'red', 'poor':'blue'}\n",
    "colors = data['appet'].map(lambda x: color_dic.get(x))\n",
    "\n",
    "sm = pd.plotting.scatter_matrix(data[features_mean], alpha=0.4, figsize=((10,10)));\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.8/site-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n",
      "/opt/anaconda3/lib/python3.8/site-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n",
      "/opt/anaconda3/lib/python3.8/site-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n",
      "/opt/anaconda3/lib/python3.8/site-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n",
      "/opt/anaconda3/lib/python3.8/site-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n",
      "/opt/anaconda3/lib/python3.8/site-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n",
      "/opt/anaconda3/lib/python3.8/site-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n",
      "/opt/anaconda3/lib/python3.8/site-packages/seaborn/distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "could not convert string to float: 'normal'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-151-1b4186c6f0aa>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrows\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m     \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdistplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ba'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m'present'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfeature\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'red'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'present'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m     \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdistplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ba'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;34m'notpresent'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfeature\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbins\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'blue'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'notpresent'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/seaborn/distributions.py\u001b[0m in \u001b[0;36mdistplot\u001b[0;34m(a, bins, hist, kde, rug, fit, hist_kws, kde_kws, rug_kws, fit_kws, color, vertical, norm_hist, axlabel, label, ax, x)\u001b[0m\n\u001b[1;32m   2566\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2567\u001b[0m     \u001b[0;31m# Make a a 1-d float array\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2568\u001b[0;31m     \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfloat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2569\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2570\u001b[0m         \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/numpy/core/_asarray.py\u001b[0m in \u001b[0;36masarray\u001b[0;34m(a, dtype, order)\u001b[0m\n\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m     \"\"\"\n\u001b[0;32m---> 83\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__array__\u001b[0;34m(self, dtype)\u001b[0m\n\u001b[1;32m    795\u001b[0m               dtype='datetime64[ns]')\n\u001b[1;32m    796\u001b[0m         \"\"\"\n\u001b[0;32m--> 797\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    798\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    799\u001b[0m     \u001b[0;31m# ----------------------------------------------------------------------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/numpy/core/_asarray.py\u001b[0m in \u001b[0;36masarray\u001b[0;34m(a, dtype, order)\u001b[0m\n\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m     \"\"\"\n\u001b[0;32m---> 83\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/core/arrays/numpy_.py\u001b[0m in \u001b[0;36m__array__\u001b[0;34m(self, dtype)\u001b[0m\n\u001b[1;32m    209\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__array__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 211\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_ndarray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    212\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m     \u001b[0m_HANDLED_TYPES\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumbers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mNumber\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/numpy/core/_asarray.py\u001b[0m in \u001b[0;36masarray\u001b[0;34m(a, dtype, order)\u001b[0m\n\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m     \"\"\"\n\u001b[0;32m---> 83\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'normal'"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "bins = 12\n",
    "plt.figure(figsize=(15,15))\n",
    "for i, feature in enumerate(features_mean):\n",
    "    rows = int(len(features_mean)/2)\n",
    "    \n",
    "    plt.subplot(rows, 2, i+1)\n",
    "    \n",
    "    sns.distplot(data[data['ba']=='present'][feature], bins=bins, color='red', label='present');\n",
    "    sns.distplot(data[data['ba']=='notpresent'][feature], bins=bins, color='blue', label='notpresent');\n",
    "    \n",
    "    plt.legend(loc='upper right')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "Neither the `x` nor `y` variable appears to be numeric.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-152-f00a69cd2fe6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrows\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m     \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mboxplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'ba'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfeature\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpalette\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"Set1\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtight_layout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/seaborn/_decorators.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     44\u001b[0m             )\n\u001b[1;32m     45\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36mboxplot\u001b[0;34m(x, y, hue, data, order, hue_order, orient, color, palette, saturation, width, dodge, fliersize, linewidth, whis, ax, **kwargs)\u001b[0m\n\u001b[1;32m   2228\u001b[0m ):\n\u001b[1;32m   2229\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2230\u001b[0;31m     plotter = _BoxPlotter(x, y, hue, data, order, hue_order,\n\u001b[0m\u001b[1;32m   2231\u001b[0m                           \u001b[0morient\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpalette\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msaturation\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2232\u001b[0m                           width, dodge, fliersize, linewidth)\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, x, y, hue, data, order, hue_order, orient, color, palette, saturation, width, dodge, fliersize, linewidth)\u001b[0m\n\u001b[1;32m    404\u001b[0m                  width, dodge, fliersize, linewidth):\n\u001b[1;32m    405\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 406\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mestablish_variables\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morient\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhue_order\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    407\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mestablish_colors\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpalette\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msaturation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    408\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36mestablish_variables\u001b[0;34m(self, x, y, hue, data, orient, order, hue_order, units)\u001b[0m\n\u001b[1;32m    154\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    155\u001b[0m             \u001b[0;31m# Figure out the plotting orientation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 156\u001b[0;31m             orient = infer_orient(\n\u001b[0m\u001b[1;32m    157\u001b[0m                 \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morient\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequire_numeric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrequire_numeric\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    158\u001b[0m             )\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/seaborn/_core.py\u001b[0m in \u001b[0;36minfer_orient\u001b[0;34m(x, y, orient, require_numeric)\u001b[0m\n\u001b[1;32m   1327\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mrequire_numeric\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"numeric\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mx_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1328\u001b[0m         \u001b[0merr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Neither the `x` nor `y` variable appears to be numeric.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1329\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1330\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1331\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: Neither the `x` nor `y` variable appears to be numeric."
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,15))\n",
    "for i, feature in enumerate(features_mean):\n",
    "    rows = int(len(features_mean)/2)\n",
    "    \n",
    "    plt.subplot(rows, 2, i+1)\n",
    "    \n",
    "    sns.boxplot(x='ba', y=feature, data=data, palette=\"Set1\")\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['bp', 'sg', 'al', 'su', 'rbc', 'pc', 'pcc', 'ba']"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_selection = ['bp','sg','al','su','rbc','pc','pcc','ba']\n",
    "features_selection"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Machine Learning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "diag_map = {'good':1, 'poor':0}\n",
    "data['appet'] = data['age'].map(diag_map)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = data.loc[:,features_mean]\n",
    "y = data.loc[:, 'appet']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\n",
    "\n",
    "accuracy_all = []\n",
    "cvs_all = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "could not convert string to float: 'normal'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-39-0a04bdca1138>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mclf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSVC\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mprediction\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mscores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcross_val_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    158\u001b[0m             \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    159\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 160\u001b[0;31m             X, y = self._validate_data(X, y, dtype=np.float64,\n\u001b[0m\u001b[1;32m    161\u001b[0m                                        \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'C'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'csr'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    162\u001b[0m                                        accept_large_sparse=False)\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    430\u001b[0m                 \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_y_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    431\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 432\u001b[0;31m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    433\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    434\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     70\u001b[0m                           FutureWarning)\n\u001b[1;32m     71\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m    793\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"y cannot be None\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    794\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 795\u001b[0;31m     X = check_array(X, accept_sparse=accept_sparse,\n\u001b[0m\u001b[1;32m    796\u001b[0m                     \u001b[0maccept_large_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maccept_large_sparse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    797\u001b[0m                     \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     70\u001b[0m                           FutureWarning)\n\u001b[1;32m     71\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    596\u001b[0m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcasting\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"unsafe\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    597\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 598\u001b[0;31m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    599\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mComplexWarning\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    600\u001b[0m                 raise ValueError(\"Complex data not supported\\n\"\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/numpy/core/_asarray.py\u001b[0m in \u001b[0;36masarray\u001b[0;34m(a, dtype, order)\u001b[0m\n\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m     \"\"\"\n\u001b[0;32m---> 83\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__array__\u001b[0;34m(self, dtype)\u001b[0m\n\u001b[1;32m   1779\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1780\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__array__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1781\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1782\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1783\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__array_wrap__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/numpy/core/_asarray.py\u001b[0m in \u001b[0;36masarray\u001b[0;34m(a, dtype, order)\u001b[0m\n\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m     \"\"\"\n\u001b[0;32m---> 83\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'normal'"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC, NuSVC, LinearSVC\n",
    "start = time.time()\n",
    "\n",
    "clf = SVC()\n",
    "clf.fit(X_train, y_train)\n",
    "prediction = clf.predict(X_test)\n",
    "scores = cross_val_score(clf, X, y, cv=5)\n",
    "\n",
    "end = time.time()\n",
    "\n",
    "accuracy_all.append(accuracy_score(prediction, y_test))\n",
    "cvs_all.append(np.mean(scores))\n",
    "\n",
    "print(\"SVC Accuracy: {0:.2%}\".format(accuracy_score(prediction, y_test)))\n",
    "print(\"Cross validation score: {0:.2%} (+/- {1:.2%})\".format(np.mean(scores), np.std(scores)*2))\n",
    "print(\"Execution time: {0:.5} seconds \\n\".format(end-start))\n",
    "\n",
    "start = time.time()\n",
    "\n",
    "clf = NuSVC()\n",
    "clf.fit(X_train, y_train)\n",
    "prediciton = clf.predict(X_test)\n",
    "scores = cross_val_score(clf, X, y, cv=5)\n",
    "\n",
    "end = time.time()\n",
    "\n",
    "accuracy_all.append(accuracy_score(prediction, y_test))\n",
    "cvs_all.append(np.mean(scores))\n",
    "\n",
    "print(\"NuSVC Accuracy: {0:.2%}\".format(accuracy_score(prediction, y_test)))\n",
    "print(\"Cross validation score: {0:.2%} (+/- {1:.2%})\".format(np.mean(scores), np.std(scores)*2))\n",
    "print(\"Execution time: {0:.5} seconds \\n\".format(end-start))\n",
    "\n",
    "start = time.time()\n",
    "\n",
    "clf = LinearSVC()\n",
    "clf.fit(X_train, y_train)\n",
    "prediction = clf.predict(X_test)\n",
    "scores = cross_val_score(clf, X, y, cv=5)\n",
    "\n",
    "end = time.time()\n",
    "\n",
    "accuracy_all.append(accuracy_score(prediction, y_test))\n",
    "cvs_all.append(np.mean(scores))\n",
    "\n",
    "print(\"LinearSVC Accuracy: {0:.2%}\".format(accuracy_score(prediction, y_test)))\n",
    "print(\"Cross validation score: {0:.2%} (+/- {1:.2%})\".format(np.mean(scores), np.std(scores)*2))\n",
    "print(\"Execution time: {0:.5} seconds \\n\".format(end-start))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using the selected features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = data.loc[:,features_selection]\n",
    "y = data.loc[:, 'appet']\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\n",
    "\n",
    "accuracy_selection = []\n",
    "cvs_selection = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "could not convert string to float: 'normal'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-48-2e919d1fc889>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mclf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSVC\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mprediction\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mscores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcross_val_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    158\u001b[0m             \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    159\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 160\u001b[0;31m             X, y = self._validate_data(X, y, dtype=np.float64,\n\u001b[0m\u001b[1;32m    161\u001b[0m                                        \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'C'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'csr'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    162\u001b[0m                                        accept_large_sparse=False)\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    430\u001b[0m                 \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_y_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    431\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 432\u001b[0;31m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    433\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    434\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     70\u001b[0m                           FutureWarning)\n\u001b[1;32m     71\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m    793\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"y cannot be None\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    794\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 795\u001b[0;31m     X = check_array(X, accept_sparse=accept_sparse,\n\u001b[0m\u001b[1;32m    796\u001b[0m                     \u001b[0maccept_large_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maccept_large_sparse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    797\u001b[0m                     \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36minner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     70\u001b[0m                           FutureWarning)\n\u001b[1;32m     71\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0minner_f\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    596\u001b[0m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcasting\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"unsafe\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    597\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 598\u001b[0;31m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    599\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mComplexWarning\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    600\u001b[0m                 raise ValueError(\"Complex data not supported\\n\"\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/numpy/core/_asarray.py\u001b[0m in \u001b[0;36masarray\u001b[0;34m(a, dtype, order)\u001b[0m\n\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m     \"\"\"\n\u001b[0;32m---> 83\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__array__\u001b[0;34m(self, dtype)\u001b[0m\n\u001b[1;32m   1779\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1780\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__array__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1781\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1782\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1783\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__array_wrap__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/numpy/core/_asarray.py\u001b[0m in \u001b[0;36masarray\u001b[0;34m(a, dtype, order)\u001b[0m\n\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m     \"\"\"\n\u001b[0;32m---> 83\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'normal'"
     ]
    }
   ],
   "source": [
    "start = time.time()\n",
    "\n",
    "clf = SVC()\n",
    "clf.fit(X_train, y_train)\n",
    "prediction = clf.predict(X_test)\n",
    "scores = cross_val_score(clf, X, y, cv=5)\n",
    "\n",
    "end = time.time()\n",
    "\n",
    "accuracy_selection.append(accuracy_score(prediction, y_test))\n",
    "cvs_selection.append(np.mean(scores))\n",
    "\n",
    "print(\"SVC Accuracy: {0:.2%}\".format(accuracy_score(prediction, y_test)))\n",
    "print(\"Cross validation score: {0:.2%} (+/- {1:.2%})\".format(np.mean(scores), np.std(scores)*2))\n",
    "print(\"Execution time: %s seconds \\n\" % \"{0:.5}\".format(end-start))\n",
    "\n",
    "start = time.time()\n",
    "\n",
    "clf = NuSVC()\n",
    "clf.fit(X_train, y_train)\n",
    "prediciton = clf.predict(X_test)\n",
    "scores = cross_val_score(clf, X, y, cv=5)\n",
    "\n",
    "end = time.time()\n",
    "\n",
    "accuracy_selection.append(accuracy_score(prediction, y_test))\n",
    "cvs_selection.append(np.mean(scores))\n",
    "\n",
    "print(\"NuSVC Accuracy: {0:.2%}\".format(accuracy_score(prediction, y_test)))\n",
    "print(\"Cross validation score: {0:.2%} (+/- {1:.2%})\".format(np.mean(scores), np.std(scores)*2))\n",
    "print(\"Execution time: %s seconds \\n\" % \"{0:.5}\".format(end-start))\n",
    "\n",
    "start = time.time()\n",
    "\n",
    "clf = LinearSVC()\n",
    "clf.fit(X_train, y_train)\n",
    "prediction = clf.predict(X_test)\n",
    "scores = cross_val_score(clf, X, y, cv=5)\n",
    "\n",
    "end = time.time()\n",
    "\n",
    "accuracy_selection.append(accuracy_score(prediction, y_test))\n",
    "cvs_selection.append(np.mean(scores))\n",
    "\n",
    "print(\"LinearSVC Accuracy: {0:.2%}\".format(accuracy_score(prediction, y_test)))\n",
    "print(\"Cross validation score: {0:.2%} (+/- {1:.2%})\".format(np.mean(scores), np.std(scores)*2))\n",
    "print(\"Execution time: %s seconds \\n\" % \"{0:.5}\".format(end-start))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Empty data passed with indices specified.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mcreate_block_manager_from_arrays\u001b[0;34m(arrays, names, axes)\u001b[0m\n\u001b[1;32m   1683\u001b[0m         \u001b[0mblocks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mform_blocks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnames\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1684\u001b[0;31m         \u001b[0mmgr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBlockManager\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mblocks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1685\u001b[0m         \u001b[0mmgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_consolidate_inplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, blocks, axes, do_integrity_check)\u001b[0m\n\u001b[1;32m    148\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdo_integrity_check\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 149\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_verify_integrity\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36m_verify_integrity\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    325\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mblock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mmgr_shape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 326\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mconstruction_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtot_items\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mblock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    327\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mtot_items\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Empty data passed with indices specified.",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-49-c1d2ab0fd1bd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'SVC'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'NuSVC'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'LinearSVC'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0md\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    466\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    467\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 468\u001b[0;31m             \u001b[0mmgr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minit_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    469\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMaskedArray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    470\u001b[0m             \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmrecords\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mmrecords\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36minit_dict\u001b[0;34m(data, index, columns, dtype)\u001b[0m\n\u001b[1;32m    281\u001b[0m             \u001b[0marr\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_datetime64tz_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0marr\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marrays\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    282\u001b[0m         ]\n\u001b[0;32m--> 283\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marrays_to_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata_names\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    284\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    285\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36marrays_to_mgr\u001b[0;34m(arrays, arr_names, index, columns, dtype, verify_integrity)\u001b[0m\n\u001b[1;32m     91\u001b[0m     \u001b[0maxes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     92\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 93\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mcreate_block_manager_from_arrays\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marr_names\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     94\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.8/site-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mcreate_block_manager_from_arrays\u001b[0;34m(arrays, names, axes)\u001b[0m\n\u001b[1;32m   1686\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mmgr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1687\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1688\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mconstruction_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marrays\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1689\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1690\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Empty data passed with indices specified."
     ]
    }
   ],
   "source": [
    "diff_accuracy = list(np.array(accuracy_selection) - np.array(accuracy_all))\n",
    "diff_cvs = list(np.array(cvs_selection) - np.array(cvs_all))\n",
    "\n",
    "d = {'accuracy_all':accuracy_all, 'accuracy_selection':accuracy_selection, 'diff_accuracy':diff_accuracy, \n",
    "     'cvs_all':cvs_all, 'cvs_selection':cvs_selection, 'diff_cvs':diff_cvs,}\n",
    "\n",
    "index = ['SVC', 'NuSVC', 'LinearSVC']\n",
    "\n",
    "df = pd.DataFrame(d, index=index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'df' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-46-00cf07b74dcd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"
     ]
    }
   ],
   "source": [
    "df"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
